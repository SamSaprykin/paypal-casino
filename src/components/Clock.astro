---
import '../styles/style.css';

const { timezone } = Astro.props;
---



<main class="flex w-full h-full bg-gray-50 justify-center items-center relative bg-gradient-to-b from-gray-50 to-gray-100">
    

    <div class="glass-clock-container">
      <div class="glass-effect-wrapper">
        <!-- Outer shadow - explicitly set opacity here -->
        <div class="glass-effect-shadow" style="opacity: var(--outer-shadow-opacity);"></div>
        <div class="glass-clock-face">
          <!-- Base glossy layer - covers the entire clock face -->
          <div class="glass-glossy-overlay" id="glass-glossy-overlay"></div>
    
          <div class="glass-edge-highlight"></div>
          <div class="glass-edge-shadow"></div>
          <div class="glass-dark-edge"></div>
          <div class="glass-reflection"></div>
          <div class="glass-reflection-overlay" id="glass-reflection-overlay"></div>
    
          <div class="clock-hour-marks" id="clock-hour-marks"></div>
          <div class="hour-hand clock-hand" id="hour-hand"></div>
          <div class="minute-hand clock-hand" id="minute-hand"></div>
    
          <!-- New second hand structure -->
          <div class="second-hand-container" id="second-hand-container">
            <div class="second-hand"></div>
            <div class="second-hand-counterweight"></div>
          </div>
    
          <!-- New second hand shadow structure -->
          <div class="second-hand-shadow" id="second-hand-shadow"></div>
    
          <div class="clock-center-dot"></div>
          <div class="clock-center-blur"></div>
          <div class="absolute top-[80px] left-1/2 -translate-x-1/2 text-3xl font-bold text-gray-800">
             TimeNow
          </div>
          <div class="clock-date" id="clock-date"></div>
          <div class="clock-timezone" id="clock-timezone">{timezone}</div>
        </div>
      </div>
    </div>
    
    <div class="attribution opacity-10">
      Inspired by <a href="https://codepen.io/Petr-Knoll/pen/QwWLZdx" target="_blank">Petr Knoll</a> and <a href="https://codepen.io/filipz" target="_blank">Filip Zrnzevic</a>
    </div>
    
    <div class="tweakpane-container" id="tweakpane-container"></div>

  </main>
  <script>

    // Wait for DOM to be fully loaded
    document.addEventListener("DOMContentLoaded", function () {
      // Create clock hour marks and numbers
      const hourMarksContainer = document.getElementById("clock-hour-marks");
      // Create hour numbers and minute markers with perfect spacing
      for (let i = 0; i < 60; i++) {
        if (i % 5 === 0) {
          const hourIndex = i / 5;
          const hourNumber = document.createElement("div");
          hourNumber.className = "clock-number";
          const angle = (i * 6 * Math.PI) / 180;
          const radius = 145;
          const left = 175 + Math.sin(angle) * radius - 15;
          const top = 175 - Math.cos(angle) * radius - 10;
          hourNumber.style.left = `${left}px`;
          hourNumber.style.top = `${top}px`;
          hourNumber.textContent = hourIndex === 0 ? "12" : hourIndex.toString();
          hourMarksContainer.appendChild(hourNumber);
        } else {
          const minuteMarker = document.createElement("div");
          minuteMarker.className = "minute-marker";
          minuteMarker.style.transform = `rotate(${i * 6}deg)`;
          hourMarksContainer.appendChild(minuteMarker);
        }
      }
    
      // Set fixed light angles
      document.documentElement.style.setProperty("--primary-light-angle", "-45deg");
      document.documentElement.style.setProperty("--dark-edge-angle", "135deg");
    
      // Set fixed glossy overlay
      const glossyOverlay = document.getElementById("glass-glossy-overlay");
      if (glossyOverlay) {
        glossyOverlay.style.background = `linear-gradient(135deg, 
          rgba(255, 255, 255, 0.9) 0%, 
          rgba(255, 255, 255, 0.7) 15%, 
          rgba(255, 255, 255, 0.5) 25%,
          rgba(255, 255, 255, 0.3) 50%, 
          rgba(255, 255, 255, 0.2) 75%, 
          rgba(255, 255, 255, 0.1) 100%)`;
        glossyOverlay.style.filter = "blur(10px)";
      }
    
      // Set fixed reflection overlay
      const reflectionOverlay = document.getElementById("glass-reflection-overlay");
      if (reflectionOverlay) {
        reflectionOverlay.style.transform = "rotate(-15deg)";
        reflectionOverlay.style.filter = "blur(10px)";
      }
    
      // Set the initial CSS variables
      document.documentElement.style.setProperty("--inner-shadow-opacity", "0.15");
      document.documentElement.style.setProperty("--reflection-opacity", "0.5");
      document.documentElement.style.setProperty("--glossy-opacity", "0.3");
    
      // Start the clock animation
      startClock();
    });
    
    // Variables for the seconds hand
    let secondsAngle = 0;
    let animationFrameId = null;
    let secondsMode = "smooth"; // Default to smooth movement
    
    // Function to start the clock
    function startClock() {
      updateHourAndMinuteHands();
      animateSecondHand();
    }
    
    // Function to update hour and minute hands based on real time
    function updateHourAndMinuteHands() {
      const now = new Date();
      const timeZone = document.getElementById("clock-timezone").textContent || "UTC";
      const localTime = new Date(
        now.toLocaleString("en-US", { timeZone: timeZone })
      );
      const hours = localTime.getHours() % 12;
      const minutes = localTime.getMinutes();
      const hourHand = document.getElementById("hour-hand");
      const minuteHand = document.getElementById("minute-hand");
      if (hourHand && minuteHand) {
        const hoursDegrees = hours * 30 + (minutes / 60) * 30;
        const minutesDegrees = minutes * 6;
        hourHand.style.transform = `rotate(${hoursDegrees}deg)`;
        minuteHand.style.transform = `rotate(${minutesDegrees}deg)`;
      }
    
      const dateDisplay = document.getElementById("clock-date");
      if (dateDisplay) {
        const months = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        const month = months[localTime.getMonth()];
        const day = localTime.getDate();
        dateDisplay.textContent = `${month} ${day}`;
      }
    
      setTimeout(updateHourAndMinuteHands, 60000);
    }
    
    // Seconds hand animation functions
    function animateSecondHand() {
      if (animationFrameId) cancelAnimationFrame(animationFrameId);
    
      const secondHandContainer = document.getElementById("second-hand-container");
      const secondHandShadow = document.getElementById("second-hand-shadow");
      if (!secondHandContainer) return;
    
      switch (secondsMode) {
        case "tick1":
          animateTickMode(secondHandContainer, secondHandShadow, 6, 1);
          break;
        case "tick2":
          animateTickMode(secondHandContainer, secondHandShadow, 3, 2);
          break;
        case "highFreq":
          animateTickMode(secondHandContainer, secondHandShadow, 0.75, 8);
          break;
        case "smooth":
        default:
          animateSmoothMode(secondHandContainer, secondHandShadow);
          break;
      }
    }
    
    function animateTickMode(container, shadow, degreesPerTick, ticksPerSecond) {
      let lastTickTime = 0;
      const intervalMs = 1000 / ticksPerSecond;
    
      function tick() {
        const now = new Date();
        const timeInMs = now.getSeconds() * 1000 + now.getMilliseconds();
        const tickIndex = Math.floor(timeInMs / intervalMs);
        const currentTickTime = tickIndex * intervalMs;
    
        if (currentTickTime !== lastTickTime) {
          lastTickTime = currentTickTime;
          const totalTicks = ticksPerSecond * 60;
          const currentTick = tickIndex % totalTicks;
          secondsAngle = currentTick * (360 / totalTicks);
          container.style.transition = "none";
          container.style.transform = `rotate(${secondsAngle}deg)`;
          if (shadow) shadow.style.transform = `rotate(${secondsAngle + 0.5}deg)`;
        }
    
        setTimeout(tick, 10);
      }
    
      tick();
    }
    
    function animateSmoothMode(container, shadow) {
      function animate() {
        const now = new Date();
        secondsAngle = now.getSeconds() * 6 + (now.getMilliseconds() / 1000) * 6;
        container.style.transition = "none";
        container.style.transform = `rotate(${secondsAngle}deg)`;
        if (shadow) shadow.style.transition = "none";
        if (shadow) shadow.style.transform = `rotate(${secondsAngle + 0.5}deg)`;
        animationFrameId = requestAnimationFrame(animate);
      }
      animate();
    }
    
    </script>
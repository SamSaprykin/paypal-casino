---
import type { RichTextNode } from '../types/contentful';

export interface Props {
  content: RichTextNode;
  class?: string;
}

const { content, class: className } = Astro.props;

// Helper function to render rich text nodes
function renderNode(node: RichTextNode): string {
  if (!node) return '';

  switch (node.nodeType) {
    case 'document':
      return node.content?.map(renderNode).join('') || '';
    
    case 'paragraph':
      const pContent = node.content?.map(renderNode).join('') || '';
      return pContent ? `<p class="mb-4">${pContent}</p>` : '';
    
    case 'heading-1':
      return `<h1 class="text-4xl font-bold mb-6 text-secondary-900">${node.content?.map(renderNode).join('') || ''}</h1>`;
    
    case 'heading-2':
      return `<h2 class="text-3xl font-semibold mb-5 text-secondary-900">${node.content?.map(renderNode).join('') || ''}</h2>`;
    
    case 'heading-3':
      return `<h3 class="text-2xl font-semibold mb-4 text-secondary-900">${node.content?.map(renderNode).join('') || ''}</h3>`;
    
    case 'heading-4':
      return `<h4 class="text-xl font-semibold mb-3 text-secondary-900">${node.content?.map(renderNode).join('') || ''}</h4>`;
    
    case 'heading-5':
      return `<h5 class="text-lg font-semibold mb-3 text-secondary-900">${node.content?.map(renderNode).join('') || ''}</h5>`;
    
    case 'heading-6':
      return `<h6 class="text-base font-semibold mb-2 text-secondary-900">${node.content?.map(renderNode).join('') || ''}</h6>`;
    
    case 'unordered-list':
      return `<ul class="list-disc list-inside mb-4 space-y-2 text-secondary-700">${node.content?.map(renderNode).join('') || ''}</ul>`;
    
    case 'ordered-list':
      return `<ol class="list-decimal list-inside mb-4 space-y-2 text-secondary-700">${node.content?.map(renderNode).join('') || ''}</ol>`;
    
    case 'list-item':
      return `<li class="ml-4">${node.content?.map(renderNode).join('') || ''}</li>`;
    
    case 'blockquote':
      return `<blockquote class="border-l-4 border-primary-500 pl-6 py-2 mb-4 italic text-secondary-600 bg-secondary-50 rounded-r-lg">${node.content?.map(renderNode).join('') || ''}</blockquote>`;
    
    case 'hr':
      return '<hr class="my-8 border-secondary-200" />';
    
    case 'hyperlink':
      const url = node.data?.uri || '#';
      const linkContent = node.content?.map(renderNode).join('') || '';
      const isExternal = url.startsWith('http') && !url.includes(Astro.site?.hostname || '');
      return `<a href="${url}" class="text-primary-600 hover:text-primary-700 underline font-medium" ${isExternal ? 'target="_blank" rel="noopener noreferrer"' : ''}>${linkContent}</a>`;
    
    case 'asset-hyperlink':
      const assetUrl = node.data?.target?.fields?.file?.url;
      const assetTitle = node.data?.target?.fields?.title || 'Download';
      if (assetUrl) {
        return `<a href="${assetUrl}" class="inline-flex items-center text-primary-600 hover:text-primary-700 underline font-medium" target="_blank" rel="noopener noreferrer">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          ${assetTitle}
        </a>`;
      }
      return '';
    
    case 'embedded-asset-block':
      const asset = node.data?.target;
      if (asset?.fields?.file) {
        const { url, details, fileName } = asset.fields.file;
        const title = asset.fields.title || fileName;
        const isImage = details?.image;
        
        if (isImage) {
          return `<figure class="my-6">
            <img 
              src="${url}?w=800&h=600&fit=fill" 
              alt="${title}" 
              class="w-full rounded-lg shadow-sm"
              loading="lazy"
            />
            ${title !== fileName ? `<figcaption class="mt-2 text-sm text-secondary-600 text-center italic">${title}</figcaption>` : ''}
          </figure>`;
        } else {
          return `<div class="my-4 p-4 border border-secondary-200 rounded-lg bg-secondary-50">
            <a href="${url}" class="flex items-center text-primary-600 hover:text-primary-700 font-medium" target="_blank" rel="noopener noreferrer">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              ${title}
            </a>
          </div>`;
        }
      }
      return '';
    
    case 'text':
      let text = node.value || '';
      
      // Apply text formatting based on marks
      if (node.marks) {
        for (const mark of node.marks) {
          switch (mark.type) {
            case 'bold':
              text = `<strong class="font-semibold">${text}</strong>`;
              break;
            case 'italic':
              text = `<em class="italic">${text}</em>`;
              break;
            case 'underline':
              text = `<u class="underline">${text}</u>`;
              break;
            case 'code':
              text = `<code class="px-2 py-1 bg-secondary-100 text-secondary-800 rounded text-sm font-mono">${text}</code>`;
              break;
          }
        }
      }
      
      return text;
    
    default:
      // Fallback for unknown node types
      return node.content?.map(renderNode).join('') || '';
  }
}

const renderedContent = renderNode(content);
---

<div class={`prose-custom ${className || ''}`} set:html={renderedContent} />

<style>
  /* Additional styling for rich text content */
  .prose-custom {
    line-height: 1.7;
  }
  
  .prose-custom > *:first-child {
    margin-top: 0;
  }
  
  .prose-custom > *:last-child {
    margin-bottom: 0;
  }
  
  /* Code blocks */
  .prose-custom pre {
    @apply bg-secondary-900 text-secondary-100 p-4 rounded-lg overflow-x-auto text-sm;
  }
  
  .prose-custom pre code {
    @apply bg-transparent text-inherit p-0;
  }
  
  /* Tables */
  .prose-custom table {
    @apply w-full border-collapse border border-secondary-200 my-6;
  }
  
  .prose-custom th,
  .prose-custom td {
    @apply border border-secondary-200 px-4 py-2 text-left;
  }
  
  .prose-custom th {
    @apply bg-secondary-50 font-semibold text-secondary-900;
  }
</style>

